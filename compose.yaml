version: '2'
services:
  redis:
    image: "redis:alpine"
    ports:
      - 6379:6379
    healthcheck:
       test: ["CMD", "redis-cli","ping"]
       interval: 5s
       timeout: 5s
       retries: 5
  db:
    image: postgres
    volumes:
      #  - ./data/db:/var/lib/postgresql/data
      - postgres_data:/var/lib/postgresql/data
    secrets:
      - db_password
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=bhread
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  web_base:
      &web_base
      build: .
      profiles: ["dev"]
      network_mode: "host"
      # Allow access of ports in the host machine (for Test feeds):
      volumes:
        - .:/code
      environment:
        - POSTGRES_DB=bhread
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
        - GITHUB_AUTH_CLIENT_ID=/run/secrets/github_auth_client_id
        - GITHUB_AUTH_SECRET=/run/secrets/github_auth_secret
        - GOOGLE_AUTH_CLIENT_ID=/run/secrets/google_auth_client_id
        - GOOGLE_AUTH_SECRET=/run/secrets/google_auth_secret
        - DJANGO_SETTINGS_MODULE=core.settings.local
      depends_on:
        db:
          condition: service_healthy
        redis:
          condition: service_healthy
      secrets:
        - github_auth_secret
        - github_auth_client_id
        - google_auth_secret
        - google_auth_client_id
        - db_password

  web_dev:
      <<: *web_base
      restart: unless-stopped
      ports:
        - 8000:8000
      command: >
        sh -c "python /code/bhread/manage.py makemigrations \
        && python /code/bhread/manage.py migrate \
        && python /code/bhread/manage.py runserver 0.0.0.0:8000"

  tailwind:
      <<: *web_base
      restart: unless-stopped
      command: >
        sh -c "python /code/bhread/manage.py tailwind install \
        && python /code/bhread/manage.py tailwind start"
      # Without tty, no stdin, and tailwind watcher aborts
      # https://github.com/tailwindlabs/tailwindcss/issues/5324
      tty: true
  djangoq_dev:
      <<: *web_base
      restart: unless-stopped
      command: >
        sh -c "python /code/bhread/manage.py makeschedules \
        && python /code/bhread/manage.py qcluster"


  ## PRODUCTION Environment CONFIGURATION
  ## Run with `docker compose --profile prod up`


  web_prod:
      &web_prod
      build: .
      profiles: ["prod"]
      # Allow access of ports in the host machine (for Test feeds):
      restart: unless-stopped
      command: >
        sh -c "python /code/bhread/manage.py migrate \
        && python /code/bhread/manage.py tailwind build --no-input \
        && python /code/bhread/manage.py collectstatic --no-input \
        && gunicorn --chdir /code/bhread core.wsgi:application --bind 0.0.0.0:8000"
      expose:
        - 8000
      volumes:
        # - .:/code
        - static_volume:/code/bhread/staticfiles
        - media_volume:/code/bhread/mediafiles
      environment:
        - POSTGRES_DB=bhread
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
        - GITHUB_AUTH_CLIENT_ID=/run/secrets/github_auth_client_id
        - GITHUB_AUTH_SECRET=/run/secrets/github_auth_secret
        - GOOGLE_AUTH_CLIENT_ID=/run/secrets/google_auth_client_id
        - GOOGLE_AUTH_SECRET=/run/secrets/google_auth_secret
        - DJANGO_SETTINGS_MODULE=core.settings.prod
        - DJANGO_SECRET_KEY=/run/secrets/django_secret_key
      depends_on:
        db:
          condition: service_healthy
        redis:
          condition: service_healthy
      secrets:
        - github_auth_secret
        - github_auth_client_id
        - google_auth_secret
        - google_auth_client_id
        - django_secret_key
        - db_password

  djangoq_prod:
      <<: *web_prod
      command: >
        sh -c "python /code/bhread/manage.py makeschedules \
        && python /code/bhread/manage.py qcluster"
      profiles: ["prod"]
  nginx:
    build: ./nginx
    profiles: ["prod"]
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - static_volume:/code/bhread/staticfiles
      - media_volume:/code/bhread/mediafiles
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - 80:80
      - 443:443
    depends_on:
      - web_prod
  certbot:
    profiles: ["prod"]
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

secrets:
  # Initial installation: you need to create the files and put content
  # github: https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app
  # google: ?
  github_auth_secret:
    file: secrets/github_auth_secret.txt
  github_auth_client_id:
    file: secrets/github_auth_client_id.txt
  google_auth_secret:
    file: secrets/google_auth_secret.txt
  google_auth_client_id:
    file: secrets/google_auth_client_id.txt
  django_secret_key:
    file: secrets/django_secret_key.txt
  db_password:
    file: secrets/db_password.txt


volumes:
  postgres_data:
  static_volume:
  media_volume:
